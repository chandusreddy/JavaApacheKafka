package com.chandu.kafka.datastream.producer;

import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import com.google.common.collect.Lists;
import com.twitter.hbc.ClientBuilder;
import com.twitter.hbc.core.Constants;
import com.twitter.hbc.core.Hosts;
import com.twitter.hbc.core.HttpHosts;
import com.twitter.hbc.core.endpoint.StatusesFilterEndpoint;
import com.twitter.hbc.core.processor.StringDelimitedProcessor;
import com.twitter.hbc.httpclient.auth.Authentication;
import com.twitter.hbc.httpclient.auth.OAuth1;

public class TwitterProducer {

	public TwitterProducer() {

	}

	public static void main(String[] args) {
		new TwitterProducer().run();
		System.out.println("Hello world");

	}

	public void run() {
		// Create a Twitter Client

		// Create a Kafka Producer

		// Loop to send tweets to Kafka
	}

	String consumerKey = "YlpKuRj31kJ5X2nRKTm7BzDN7";
	String consumerSecret = "gvBr2C7stQ8mUcO6BHgq56OMr6BHqjlJQtyugOhK6Vuv1007sZ";
	String token = "1379870073335218182-NcpQSpbmJERlNqued0y10xdamgsq3W";
	String secret = "LjFrIcCJRwUlZ24FqQXfrZfHBvASrNoRCCk2mTgAonf3G";

	public void createTwitterClient() {
		/**
		 * Set up your blocking queues: Be sure to size these properly based on expected
		 * TPS of your stream
		 */
		BlockingQueue<String> msgQueue = new LinkedBlockingQueue<String>(100000);

		/**
		 * Declare the host you want to connect to, the end point, and authentication
		 * (basic auth or oauth )
		 */
		Hosts hosebirdHosts = new HttpHosts(Constants.STREAM_HOST);
		StatusesFilterEndpoint hosebirdEndpoint = new StatusesFilterEndpoint();

		// Optional: set up some followings and track terms

		List<String> terms = Lists.newArrayList("kafka");
		hosebirdEndpoint.trackTerms(terms);

		// These secrets should be read from a config file
		Authentication hosebirdAuth = new OAuth1(consumerKey, consumerSecret, token, secret);

		ClientBuilder builder = new ClientBuilder().name("Hosebird-Client-01") // optional: mainly for the logs
				.hosts(hosebirdHosts).authentication(hosebirdAuth).endpoint(hosebirdEndpoint)
				.processor(new StringDelimitedProcessor(msgQueue));
		
		Client hosebirdClient = builder.build();
		// Attempts to establish a connection.
		hosebirdClient.connect();
	}

}
